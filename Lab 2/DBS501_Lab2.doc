1.
SQL> @Lab2Q1;
SET LINESIZE 130;
SET PAGESIZE 130;
SET SERVEROUTPUT ON
SET VERIFY OFF 

ACCEPT scale PROMPT 'Enter your input scale (C or F) for temperature: ';
ACCEPT temp PROMPT 'Enter your temperature value to be converted: ';

DECLARE
v_scale CHAR(1) := '&scale';
v_temp NUMBER(5,1) := '&temp';

BEGIN

IF UPPER(v_scale) = ('F') THEN
   v_temp := (v_temp - 32) * 5/9;
   DBMS_OUTPUT.PUT_LINE ('You converted temperature in C is exactly ' || TO_CHAR(v_temp));

ELSIF UPPER(v_scale) = ('C') THEN
   v_temp := (v_temp * 9/5) + 32;
   DBMS_OUTPUT.PUT_LINE ('You converted temperature in F is exactly ' || TO_CHAR(v_temp));

ELSE
   DBMS_OUTPUT.PUT_LINE ('This is NOT a valid scale. Must be C or F.');

END IF;

END;

/

Enter your input scale (C or F) for temperature: A
Enter your temperature value to be converted: 30
This is NOT a valid scale. Must be C or F.                                                                                        

PL/SQL procedure successfully completed.

SQL> @Lab2Q1;
Enter your input scale (C or F) for temperature: C
Enter your temperature value to be converted: 30
You converted temperature in F is exactly 86                                                                                      

PL/SQL procedure successfully completed.

SQL> @Lab2Q1;
Enter your input scale (C or F) for temperature: F
Enter your temperature value to be converted: -25
You converted temperature in C is exactly -31.7                                                                                   

PL/SQL procedure successfully completed.
2.
SQL> @Lab2Q2;

SET LINESIZE 130;
SET PAGESIZE 130;
SET SERVEROUTPUT ON;
SET VERIFY OFF;

ACCEPT id PROMPT 'Please enter the Instructor Id: ';

DECLARE
v_id NUMBER := '&id';
v_name INSTRUCTOR.FIRST_NAME%TYPE;
v_section_count NUMBER;
v_message VARCHAR(100);

BEGIN

Select first_name || ' ' || last_name INTO v_name
From instructor
Where v_id = instructor_id;

Select COUNT(SECTION_ID) into v_section_count
From section
where v_id= instructor_id;

DBMS_OUTPUT.PUT_LINE('Instructor ' || v_name || ' , teaches ' || v_section_count || ' section(s)');

v_message := CASE 
	WHEN v_section_count > 9 THEN 'This instructor needs to rest in the next term.'
	WHEN v_section_count = 9 THEN 'This instructor teaches enough sections.'
	ELSE 'This instructor may teach more sections.'
	
	END;
	
	DBMS_OUTPUT.PUT_LINE(v_message);
	
	EXCEPTION
	
	WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('This is not a valid instructor');
	
END;

/






Please enter the Instructor Id: 999
This is not a valid instructor                                                                                                    

PL/SQL procedure successfully completed.

SQL> @Lab2Q2;
Please enter the Instructor Id: 102
Instructor Tom Wojick , teaches 10 section(s)                                                                                     
This instructor needs to rest in the next term.                                                                                   

PL/SQL procedure successfully completed.

SQL> @Lab2Q2;
Please enter the Instructor Id: 101
Instructor Fernand Hanks , teaches 9 section(s)                                                                                   
This instructor teaches enough sections.                                                                                          

PL/SQL procedure successfully completed.

SQL> @Lab2Q2;
Please enter the Instructor Id: 109
Instructor Rick Chow , teaches 0 section(s)                                                                                       
This instructor may teach more sections.                                                                                          

PL/SQL procedure successfully completed.





























3.
SQL> @Lab2Q3;
SET LINESIZE 130;
SET PAGESIZE 130;
SET SERVEROUTPUT ON;
SET VERIFY OFF;

ACCEPT num PROMPT 'Please enter a Positive Integer: ';

DECLARE
   v_num NUMBER(6) := &num;
   v_count NUMBER (6);
   v_add NUMBER (9) := 0;
   v_message CHAR(5);
   
 BEGIN
 
 IF v_num < 0 THEN 
	DBMS_OUTPUT.PUT_LINE('Error, not a positive integer!');
	
 ELSE
	
	IF MOD(v_num , 2) = 0 THEN
		v_message := 'Even';
		v_count := v_num;
		
		WHILE v_count > 0 LOOP
		v_add := v_add + v_count;
		v_count := v_count - 2;
		END LOOP;
		
	ELSE	
		v_message := 'Odd';
		v_count := v_num;
		
		WHILE v_count > 0 LOOP
		v_add := v_add + v_count;
		v_count := v_count -2;
		END LOOP;
		
	END IF;

	DBMS_OUTPUT.PUT_LINE('The sum of ' || v_message || ' integers between 1 and ' || v_num || ' is ' || v_add );
	
END IF;

END;

/
	


	
Please enter a Positive Integer: 12
The sum of Even  integers between 1 and 12 is 42                                                                                  

PL/SQL procedure successfully completed.

SQL> @Lab2Q3;
Please enter a Positive Integer: 901
The sum of Odd   integers between 1 and 901 is 203401                                                                             

PL/SQL procedure successfully completed.












































4.

SQL> @Lab2Q4;

SET LINESIZE 130;
SET PAGESIZE 130;
SET SERVEROUTPUT ON;
SET VERIFY OFF;

ACCEPT locID PROMPT 'Enter valid Location Id: ';

DECLARE

v_locID departments.location_id%TYPE := &locID;
v_deptCount NUMBER;
v_empCount NUMBER;
v_count1 NUMBER;
v_count2 NUMBER;

BEGIN

UPDATE Departments
SET location_id = 1400
WHERE department_id IN (40, 70);

Select COUNT(department_id) INTO v_deptCount
From Departments 
Where v_locID = location_id;

Select COUNT(employee_id) INTO v_empCount
From employees
Where department_id in (Select department_id From departments Where v_locID = location_id);

FOR v_count1 in 1..v_deptCount LOOP
	DBMS_OUTPUT.PUT_LINE('Outer Loop: Department #'|| v_count1);
	
	For v_count2 in 1..v_empCount LOOP
		DBMS_OUTPUT.PUT_LINE('* Inner Loop: Department #'|| v_count2);
		
	END LOOP;

END LOOP;

END;

/

ROLLBACK;


						
												
		
Enter valid Location Id: 1800
Outer Loop: Department #1                                                                                                         
* Inner Loop: Department #1                                                                                                       
* Inner Loop: Department #2                                                                                                       

PL/SQL procedure successfully completed.


Rollback complete.

SQL> @Lab2Q4;
Enter valid Location Id: 1400
Outer Loop: Department #1                                                                                                         
* Inner Loop: Department #1                                                                                                       
* Inner Loop: Department #2                                                                                                       
* Inner Loop: Department #3                                                                                                       
* Inner Loop: Department #4                                                                                                       
* Inner Loop: Department #5                                                                                                       
* Inner Loop: Department #6                                                                                                       
* Inner Loop: Department #7                                                                                                       
Outer Loop: Department #2                                                                                                         
* Inner Loop: Department #1                                                                                                       
* Inner Loop: Department #2                                                                                                       
* Inner Loop: Department #3                                                                                                       
* Inner Loop: Department #4                                                                                                       
* Inner Loop: Department #5                                                                                                       
* Inner Loop: Department #6                                                                                                       
* Inner Loop: Department #7                                                                                                       
Outer Loop: Department #3                                                                                                         
* Inner Loop: Department #1                                                                                                       
* Inner Loop: Department #2                                                                                                       
* Inner Loop: Department #3                                                                                                       
* Inner Loop: Department #4                                                                                                       
* Inner Loop: Department #5                                                                                                       
* Inner Loop: Department #6                                                                                                       
* Inner Loop: Department #7                                                                                                       

PL/SQL procedure successfully completed.


Rollback complete.

SQL> spool off;

Lab 2 DBS 501 By Le, Sean Teacher: Nebojsa
